name: Auto Tag

on:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  auto-tag:
    name: Auto Tag Release
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip-tag]') }}
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get latest tag
      id: latest-tag
      run: |
        # Get the latest tag, default to v1.1.0 if no tags exist
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.1.0")
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Latest tag: $LATEST_TAG"

    - name: Determine version bump
      id: version-bump
      run: |
        # Analyze commit messages to determine version bump type
        COMMIT_MSG="${{ github.event.head_commit.message }}"
        
        if echo "$COMMIT_MSG" | grep -qE "^(feat|feature)(\(.+\))?!:|^BREAKING CHANGE:|breaking change"; then
          BUMP_TYPE="major"
        elif echo "$COMMIT_MSG" | grep -qE "^(feat|feature)(\(.+\))?:"; then
          BUMP_TYPE="minor"
        elif echo "$COMMIT_MSG" | grep -qE "^(fix|bugfix|patch)(\(.+\))?:"; then
          BUMP_TYPE="patch"
        else
          BUMP_TYPE="patch"  # Default to patch for other changes
        fi
        
        echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
        echo "Detected bump type: $BUMP_TYPE"

    - name: Calculate new version
      id: new-version
      run: |
        LATEST_TAG="${{ steps.latest-tag.outputs.latest_tag }}"
        BUMP_TYPE="${{ steps.version-bump.outputs.bump_type }}"
        
        # Remove 'v' prefix and split version
        VERSION=${LATEST_TAG#v}
        IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
        
        # Bump version based on type
        case $BUMP_TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"

    - name: Check if tag exists
      id: tag-exists
      run: |
        NEW_VERSION="${{ steps.new-version.outputs.new_version }}"
        if git rev-parse "$NEW_VERSION" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Tag $NEW_VERSION already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Tag $NEW_VERSION does not exist"
        fi

    - name: Create and push tag
      if: steps.tag-exists.outputs.exists == 'false'
      run: |
        NEW_VERSION="${{ steps.new-version.outputs.new_version }}"
        COMMIT_MSG="${{ github.event.head_commit.message }}"
        
        # Create annotated tag with commit message
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION

        $COMMIT_MSG"
        
        git push origin "$NEW_VERSION"
        
        echo "Created and pushed tag: $NEW_VERSION"

    - name: Skip tagging notification
      if: steps.tag-exists.outputs.exists == 'true'
      run: |
        echo "Skipping tag creation - tag already exists"

  notify-tag-created:
    name: Notify Tag Created
    runs-on: ubuntu-latest
    needs: auto-tag
    if: success()
    steps:
    - name: Tag creation notification
      run: |
        echo "New tag created successfully!"
        echo "Release workflow will be triggered automatically"
        echo "New version will be available via go get"
